
let earl_str = "http://www.w3.org/ns/earl#";;
let earl = Iri.of_string earl_str ;;
let earl_ s = Iri.of_string (earl_str ^ s);;

let assertedBy = earl_ "assertedBy" ;;
let assertion = earl_ "Assertion" ;;
let c_Assertion = earl_ "Assertion" ;;
let assertor = earl_ "Assertor" ;;
let c_Assertor = earl_ "Assertor" ;;
let cannotTell = earl_ "CannotTell" ;;
let c_CannotTell = earl_ "CannotTell" ;;
let fail = earl_ "Fail" ;;
let c_Fail = earl_ "Fail" ;;
let info = earl_ "info" ;;
let mainAssertor = earl_ "mainAssertor" ;;
let mode = earl_ "mode" ;;
let notApplicable = earl_ "NotApplicable" ;;
let c_NotApplicable = earl_ "NotApplicable" ;;
let notTested = earl_ "NotTested" ;;
let c_NotTested = earl_ "NotTested" ;;
let outcome = earl_ "outcome" ;;
let outcomeValue = earl_ "OutcomeValue" ;;
let c_OutcomeValue = earl_ "OutcomeValue" ;;
let pass = earl_ "Pass" ;;
let c_Pass = earl_ "Pass" ;;
let pointer = earl_ "pointer" ;;
let result = earl_ "result" ;;
let software = earl_ "Software" ;;
let c_Software = earl_ "Software" ;;
let subject = earl_ "subject" ;;
let test = earl_ "test" ;;
let testCase = earl_ "TestCase" ;;
let c_TestCase = earl_ "TestCase" ;;
let testCriterion = earl_ "TestCriterion" ;;
let c_TestCriterion = earl_ "TestCriterion" ;;
let testMode = earl_ "TestMode" ;;
let c_TestMode = earl_ "TestMode" ;;
let testRequirement = earl_ "TestRequirement" ;;
let c_TestRequirement = earl_ "TestRequirement" ;;
let testResult = earl_ "TestResult" ;;
let c_TestResult = earl_ "TestResult" ;;
let testSubject = earl_ "TestSubject" ;;
let c_TestSubject = earl_ "TestSubject" ;;

module Open = struct
  let earl_assertedBy = assertedBy
  let earl_assertion = assertion
  let earl_c_Assertion = c_Assertion
  let earl_assertor = assertor
  let earl_c_Assertor = c_Assertor
  let earl_cannotTell = cannotTell
  let earl_c_CannotTell = c_CannotTell
  let earl_fail = fail
  let earl_c_Fail = c_Fail
  let earl_info = info
  let earl_mainAssertor = mainAssertor
  let earl_mode = mode
  let earl_notApplicable = notApplicable
  let earl_c_NotApplicable = c_NotApplicable
  let earl_notTested = notTested
  let earl_c_NotTested = c_NotTested
  let earl_outcome = outcome
  let earl_outcomeValue = outcomeValue
  let earl_c_OutcomeValue = c_OutcomeValue
  let earl_pass = pass
  let earl_c_Pass = c_Pass
  let earl_pointer = pointer
  let earl_result = result
  let earl_software = software
  let earl_c_Software = c_Software
  let earl_subject = subject
  let earl_test = test
  let earl_testCase = testCase
  let earl_c_TestCase = c_TestCase
  let earl_testCriterion = testCriterion
  let earl_c_TestCriterion = c_TestCriterion
  let earl_testMode = testMode
  let earl_c_TestMode = c_TestMode
  let earl_testRequirement = testRequirement
  let earl_c_TestRequirement = c_TestRequirement
  let earl_testResult = testResult
  let earl_c_TestResult = c_TestResult
  let earl_testSubject = testSubject
  let earl_c_TestSubject = c_TestSubject
end
