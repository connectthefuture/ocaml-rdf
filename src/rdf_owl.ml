
let owl_str = "http://www.w3.org/2002/07/owl#";;
let owl = Iri.of_string owl_str ;;
let owl_ s = Iri.of_string (owl_str ^ s);;

let allDifferent = owl_ "AllDifferent" ;;
let allDisjointClasses = owl_ "AllDisjointClasses" ;;
let allDisjointProperties = owl_ "AllDisjointProperties" ;;
let allValuesFrom = owl_ "allValuesFrom" ;;
let annotatedProperty = owl_ "annotatedProperty" ;;
let annotatedSource = owl_ "annotatedSource" ;;
let annotatedTarget = owl_ "annotatedTarget" ;;
let annotation = owl_ "Annotation" ;;
let annotationProperty = owl_ "AnnotationProperty" ;;
let assertionProperty = owl_ "assertionProperty" ;;
let asymmetricProperty = owl_ "AsymmetricProperty" ;;
let axiom = owl_ "Axiom" ;;
let cardinality = owl_ "cardinality" ;;
let class_ = owl_ "Class" ;;
let complementOf = owl_ "complementOf" ;;
let dataRange = owl_ "DataRange" ;;
let datatypeComplementOf = owl_ "datatypeComplementOf" ;;
let datatypeProperty = owl_ "DatatypeProperty" ;;
let deprecatedClass = owl_ "DeprecatedClass" ;;
let deprecatedProperty = owl_ "DeprecatedProperty" ;;
let differentFrom = owl_ "differentFrom" ;;
let disjointUnionOf = owl_ "disjointUnionOf" ;;
let disjointWith = owl_ "disjointWith" ;;
let distinctMembers = owl_ "distinctMembers" ;;
let equivalentClass = owl_ "equivalentClass" ;;
let equivalentProperty = owl_ "equivalentProperty" ;;
let functionalProperty = owl_ "FunctionalProperty" ;;
let hasKey = owl_ "hasKey" ;;
let hasSelf = owl_ "hasSelf" ;;
let hasValue = owl_ "hasValue" ;;
let intersectionOf = owl_ "intersectionOf" ;;
let inverseFunctionalProperty = owl_ "InverseFunctionalProperty" ;;
let inverseOf = owl_ "inverseOf" ;;
let irreflexiveProperty = owl_ "IrreflexiveProperty" ;;
let maxCardinality = owl_ "maxCardinality" ;;
let maxQualifiedCardinality = owl_ "maxQualifiedCardinality" ;;
let members = owl_ "members" ;;
let minCardinality = owl_ "minCardinality" ;;
let minQualifiedCardinality = owl_ "minQualifiedCardinality" ;;
let namedIndividual = owl_ "NamedIndividual" ;;
let negativePropertyAssertion = owl_ "NegativePropertyAssertion" ;;
let objectProperty = owl_ "ObjectProperty" ;;
let onClass = owl_ "onClass" ;;
let onDataRange = owl_ "onDataRange" ;;
let onDatatype = owl_ "onDatatype" ;;
let oneOf = owl_ "oneOf" ;;
let onProperties = owl_ "onProperties" ;;
let onProperty = owl_ "onProperty" ;;
let ontology = owl_ "Ontology" ;;
let ontologyProperty = owl_ "OntologyProperty" ;;
let propertyChainAxiom = owl_ "propertyChainAxiom" ;;
let propertyDisjointWith = owl_ "propertyDisjointWith" ;;
let qualifiedCardinality = owl_ "qualifiedCardinality" ;;
let reflexiveProperty = owl_ "ReflexiveProperty" ;;
let restriction = owl_ "Restriction" ;;
let sameAs = owl_ "sameAs" ;;
let someValuesFrom = owl_ "someValuesFrom" ;;
let sourceIndividual = owl_ "sourceIndividual" ;;
let symmetricProperty = owl_ "SymmetricProperty" ;;
let targetIndividual = owl_ "targetIndividual" ;;
let targetValue = owl_ "targetValue" ;;
let transitiveProperty = owl_ "TransitiveProperty" ;;
let unionOf = owl_ "unionOf" ;;
let withRestrictions = owl_ "withRestrictions" ;;

module Open = struct
  let owl_allDifferent = allDifferent
  let owl_allDisjointClasses = allDisjointClasses
  let owl_allDisjointProperties = allDisjointProperties
  let owl_allValuesFrom = allValuesFrom
  let owl_annotatedProperty = annotatedProperty
  let owl_annotatedSource = annotatedSource
  let owl_annotatedTarget = annotatedTarget
  let owl_annotation = annotation
  let owl_annotationProperty = annotationProperty
  let owl_assertionProperty = assertionProperty
  let owl_asymmetricProperty = asymmetricProperty
  let owl_axiom = axiom
  let owl_cardinality = cardinality
  let owl_class = class_
  let owl_complementOf = complementOf
  let owl_dataRange = dataRange
  let owl_datatypeComplementOf = datatypeComplementOf
  let owl_datatypeProperty = datatypeProperty
  let owl_deprecatedClass = deprecatedClass
  let owl_deprecatedProperty = deprecatedProperty
  let owl_differentFrom = differentFrom
  let owl_disjointUnionOf = disjointUnionOf
  let owl_disjointWith = disjointWith
  let owl_distinctMembers = distinctMembers
  let owl_equivalentClass = equivalentClass
  let owl_equivalentProperty = equivalentProperty
  let owl_functionalProperty = functionalProperty
  let owl_hasKey = hasKey
  let owl_hasSelf = hasSelf
  let owl_hasValue = hasValue
  let owl_intersectionOf = intersectionOf
  let owl_inverseFunctionalProperty = inverseFunctionalProperty
  let owl_inverseOf = inverseOf
  let owl_irreflexiveProperty = irreflexiveProperty
  let owl_maxCardinality = maxCardinality
  let owl_maxQualifiedCardinality = maxQualifiedCardinality
  let owl_members = members
  let owl_minCardinality = minCardinality
  let owl_minQualifiedCardinality = minQualifiedCardinality
  let owl_namedIndividual = namedIndividual
  let owl_negativePropertyAssertion = negativePropertyAssertion
  let owl_objectProperty = objectProperty
  let owl_onClass = onClass
  let owl_onDataRange = onDataRange
  let owl_onDatatype = onDatatype
  let owl_oneOf = oneOf
  let owl_onProperties = onProperties
  let owl_onProperty = onProperty
  let owl_ontology = ontology
  let owl_ontologyProperty = ontologyProperty
  let owl_propertyChainAxiom = propertyChainAxiom
  let owl_propertyDisjointWith = propertyDisjointWith
  let owl_qualifiedCardinality = qualifiedCardinality
  let owl_reflexiveProperty = reflexiveProperty
  let owl_restriction = restriction
  let owl_sameAs = sameAs
  let owl_someValuesFrom = someValuesFrom
  let owl_sourceIndividual = sourceIndividual
  let owl_symmetricProperty = symmetricProperty
  let owl_targetIndividual = targetIndividual
  let owl_targetValue = targetValue
  let owl_transitiveProperty = transitiveProperty
  let owl_unionOf = unionOf
  let owl_withRestrictions = withRestrictions
end
